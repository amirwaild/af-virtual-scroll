/*
              * aria-rowindex is counted from 1 according to w3c spec;
              * parseInt with radix is 2x faster, then +, -, etc.
                https://jsperf.com/number-vs-parseint-vs-plus/116
          */

/*
            Some benchmarks inspire me to use nextElementSibling
            https://jsperf.com/nextsibling-vs-childnodes-increment/2
        */

/*
            TODO:
                make tree[ 0 ] more obvious and self-documented
        */

/*
          when using ...args and arrow func, babel is making unnecessary arguments copy.
          Going old-school here for perf
      */

/*
        TODO:
            perf benchmarks tell, that removeChild is called often.
            maybe cache previous range( endIndex - startIndex ) and if new range is smaller - throttle it's decrease?
    */

/*
        Uint16 cannot be used here, because array stores intermediate sums, which can be huge.
    */

/*
        walkUntil works by "strict less" algo. It is good for startIndex,
        but for endIndex we need "<=", so adding 1 artificially.
    */

/*
      Hmm, I can't put here more than ~ 3 000 000. Maybe need to put one more row in case this height is > 3 000 000
  */

/*
      IDEA:
          pack this to one double number.
          num + remianer / 65535
          Cons:
              * unobvious
              * perf fault because of double type costs.
  */

/*
      TODO: maybe some react-like performUnitOfWork logic is needed here?
  */

/*
      Trees are not always ideally allocated, gaps are possible.
      Classical way for calculating parents is much simpler,
      but can do much more work(summing zeros) in such conditions. Commented classic algo:
       for( let i = N + endIndex >> 1, j; i > 0; --i ){
          j = i << 1;
          tree[ i ] = tree[ j ] + tree[ j | 1 ];
      }
  */

/*
      tabIndex="0" is for proper keyboard nav
      https://bugzilla.mozilla.org/show_bug.cgi?id=1346159
  */

/*
    * flex: 1 1 auto, assuming that table would be used full-stretch mostly
    width: 100% covers case, when no tbody is rendered and exact width cannot be calculated
*/

/*
  TODO: maybe this is needed on #totalRows? Check
   cancelPendingAsyncCallsIfNeeded(){
      if( this.totalRows < 0 ){
          this.cancelPendingAsyncCalls();
      }
  }
  */

/* In segments tree 1 node is always sum of all elements */

/* avoiding double destructurization via getRowExtraProps, so making prop object once */

/* clearing only what is needed */

/* harmony default export */

/* harmony import */

/*#__PURE__*/

/***/

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js + 1 modules

// EXTERNAL MODULE: ./node_modules/emotion/dist/emotion.esm.js + 1 modules

// console.log( "%d| was: %d; is: %d", index, tree[N+index],newHeight)
