{"version":3,"sources":["webpack:///./websiteSrc/examples/table/styledColumns.js","webpack:///./node_modules/lodash/range.js","webpack:///./node_modules/lodash/_createRange.js","webpack:///./node_modules/lodash/_baseRange.js"],"names":["wrapperCss","getRowExtraProps","rowData","rowDataIndex","columns","times","colIndex","dataKey","label","background","Math","floor","width","r","getRowData","index","range","reduce","acc","totals","TableWithStyledColumns","className","css","useStickyIfPossible","rowCount","createRange","module","exports","baseRange","isIterateeCall","toFinite","fromRight","start","end","step","undefined","nativeCeil","ceil","nativeMax","max","length","result","Array"],"mappings":";0JAOA,IAAMA,EAAa,CAAH,qLAgBVC,EAAmB,SAAEC,EAASC,GAAX,OAA6BA,EAAe,EAAI,CAAE,WAAY,IAAO,MAExFC,EAAUC,IAJC,GAIgB,SAAAC,GAAQ,MAAK,CAC1CC,QAAS,MAAMD,EACfE,MAAO,MAAMF,EACbG,WAAY,OAAOC,KAAKC,MAAM,GAAaL,GAAjC,YACVM,MAAOC,IAAG,GAAI,SAGZC,EAAa,SAAAC,GAAK,OAAIC,IAXX,GAW6BC,QAAO,SAAEC,EAAKZ,GAExD,OADAY,EAAI,MAAOZ,GAAeS,EACnBG,IACR,KAEGC,EAASH,IAhBE,GAgBgBC,QAAO,SAAEC,EAAKZ,GAE3C,OADAY,EAAI,MAAOZ,GAAe,CAAE,SACrBY,IACR,IAeYE,UAbgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAC3B,YAAC,IAAD,CACIpB,iBAAkBA,EAClBqB,IAAKtB,EACLqB,UAAWA,EACXE,qBAAmB,EACnBT,WAAYA,EACZU,SAAU,IACVL,OAAQA,EACRf,QAASA,M,qBCnDjB,IA2CIY,EA3Cc,EAAQ,KA2CdS,GAEZC,EAAOC,QAAUX,G,qBC7CjB,IAAIY,EAAY,EAAQ,MACpBC,EAAiB,EAAQ,IACzBC,EAAW,EAAQ,IA2BvBJ,EAAOC,QAlBP,SAAqBI,GACnB,OAAO,SAASC,EAAOC,EAAKC,GAa1B,OAZIA,GAAuB,iBAARA,GAAoBL,EAAeG,EAAOC,EAAKC,KAChED,EAAMC,OAAOC,GAGfH,EAAQF,EAASE,QACLG,IAARF,GACFA,EAAMD,EACNA,EAAQ,GAERC,EAAMH,EAASG,GAEjBC,OAAgBC,IAATD,EAAsBF,EAAQC,EAAM,GAAK,EAAKH,EAASI,GACvDN,EAAUI,EAAOC,EAAKC,EAAMH,M,mBCxBvC,IAAIK,EAAa1B,KAAK2B,KAClBC,EAAY5B,KAAK6B,IAyBrBb,EAAOC,QAZP,SAAmBK,EAAOC,EAAKC,EAAMH,GAKnC,IAJA,IAAIhB,GAAS,EACTyB,EAASF,EAAUF,GAAYH,EAAMD,IAAUE,GAAQ,IAAK,GAC5DO,EAASC,MAAMF,GAEZA,KACLC,EAAOV,EAAYS,IAAWzB,GAASiB,EACvCA,GAASE,EAEX,OAAOO","file":"15.5992cb2c98cae6a02481.js","sourcesContent":["import React from \"react\";\nimport Table from \"af-virtual-scroll/lib/Table\";\nimport times from \"lodash/times\";\nimport range from \"lodash/range\";\nimport r from \"lodash/random\";\nimport { css } from \"@emotion/core\";\n\nconst wrapperCss = css`\n    table {\n        border-spacing: 0;\n    }\n    tfoot td, th {\n        padding: 0.5em;\n        background: #d6d6d6;\n        font-weight: bold;\n    }\n    tr[data-odd]{\n        background: rgba(0,0,0,0.2)\n    }\n`;\n\nconst colCount = 5;\n\nconst getRowExtraProps = ( rowData, rowDataIndex ) => rowDataIndex % 2 ? { \"data-odd\": \"\" } : null;\n\nconst columns = times( colCount, colIndex => ({\n    dataKey: `col${colIndex}`,\n    label: `col${colIndex}`,\n    background: `hsl(${Math.floor(360/colCount*colIndex)},80%,80%)`,\n    width: r( 50, 300 )\n}));\n\nconst getRowData = index => range( colCount ).reduce(( acc, colIndex ) => {\n    acc[ `col${colIndex}` ] = index;\n    return acc;\n}, {});\n\nconst totals = range( colCount ).reduce(( acc, colIndex ) => {\n    acc[ `col${colIndex}` ] = [ \"count\" ];\n    return acc;\n}, {});\n\nconst TableWithStyledColumns = ({ className }) => (\n    <Table\n        getRowExtraProps={getRowExtraProps}\n        css={wrapperCss}\n        className={className}\n        useStickyIfPossible\n        getRowData={getRowData}\n        rowCount={500}\n        totals={totals}\n        columns={columns}\n    />\n);\n\nexport default TableWithStyledColumns;","var createRange = require('./_createRange');\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nmodule.exports = range;\n","var baseRange = require('./_baseRange'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nmodule.exports = createRange;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nmodule.exports = baseRange;\n"],"sourceRoot":""}