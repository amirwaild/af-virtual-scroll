{"version":3,"sources":["webpack:///./websiteSrc/examples/list/withFeatures.js","webpack:///./node_modules/lodash/toFinite.js","webpack:///./node_modules/lodash/identity.js","webpack:///./node_modules/lodash/toInteger.js","webpack:///./lib/List/common/Row.js","webpack:///./lib/List/common/Rows.js","webpack:///./lib/List/index.js"],"names":["wrapperCss","heights","times","r","getRowData","index","style","lineHeight","borderTop","background","ListWithScrollToRowButton","className","dataRef","useRef","css","onSubmit","e","preventDefault","v","currentTarget","elements","scrollRow","value","current","scrollToRow","name","type","defaultValue","rowCount","toNumber","module","exports","toFinite","result","remainder","Row","_ref","getRowExtraProps","rowIndex","rowData","React","createElement","getRowProps","propTypes","SUBSCRIBE_EVENTS","Rows","RowComponent","API","useApi","useEffect","reportRowsRendered","rangeFrom","rangeTo","getRowKey","rowKey","push","key","getVisibleRows","startIndex","endIndex","rowDataGetter","rowKeyGetter","List","fixedSize","overscanRowsCount","rowCountWarningsTable","RowCountWarningContainer","_ref$RowComponent","RowComponentDefault","props","_objectWithoutPropertiesLoose","scrollContainerRef","rowsContainerRef","Store","useStore","FixedSizeListStore","VariableSizeListStore","merge","totalRows","rowsContainerNode","scrollContainerNode","Context","Provider","ScrollContainer","_extends","cx","ref","Scroller","Component","defaultProps","Object","assign","commonDefaultProps","memo","RowCountWarningContainerDefault"],"mappings":"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","file":"13.e6d97bd91e592f2ceda9.js","sourcesContent":["import React, { useRef } from \"react\";\nimport List from \"af-virtual-scroll/lib/List\";\nimport r from \"lodash/random\";\nimport times from \"lodash/times\";\nimport { css } from \"@emotion/core\";\n\nconst wrapperCss = css`\n    display: flex;\n    flex-flow: column nowrap;\n`;\n\nconst rowCount = 100000;\n\nconst heights = times( rowCount, () => r( 50, 250 ) );\n\nconst getRowData = index => (\n    <div style={{\n        lineHeight: `${heights[index]}px`,\n        borderTop: \"1px solid #666\",\n        background: `hsl(${r(0,360)},${r(30,80)}%,${r(30,80)}%)`\n    }}>\n        row{index}:&nbsp;{heights[index]}px\n    </div>\n);\n\nconst ListWithScrollToRowButton = ({ className }) => {\n\n    const dataRef = useRef();\n\n    const submitHandler = e => {\n        e.preventDefault();\n        const v = e.currentTarget.elements.scrollRow.value;\n        dataRef.current.scrollToRow( +v );\n    };\n\n    return (\n        <div css={wrapperCss} className={className}>\n            <form onSubmit={submitHandler}>\n                <label>\n                    Row:&nbsp;\n                    <input\n                        name=\"scrollRow\"\n                        type=\"number\"\n                        defaultValue=\"0\"\n                    />\n                </label>\n                <button type=\"submit\">\n                    Scroll\n                </button>\n            </form>\n            <List\n                dataRef={dataRef}\n                getRowData={getRowData}\n                rowCount={rowCount}\n            />\n        </div>\n    );\n};\n\nexport default ListWithScrollToRowButton;","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getRowProps } from \"../../utils/extraPropsGetters\";\n\nvar Row = function Row(_ref) {\n  var getRowData = _ref.getRowData,\n      getRowExtraProps = _ref.getRowExtraProps,\n      rowIndex = _ref.rowIndex;\n  var rowData = getRowData(rowIndex);\n  return /*#__PURE__*/React.createElement(\"div\", getRowProps(rowData, rowIndex, getRowExtraProps), rowData);\n};\n\nRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  getRowData: PropTypes.func.isRequired,\n  rowIndex: PropTypes.number.isRequired,\n  getRowExtraProps: PropTypes.func\n} : {};\nexport default Row;","import React, { useEffect } from \"react\";\nimport useApi from \"../../useApi\";\nvar SUBSCRIBE_EVENTS = [\"#startIndex\", \"#endIndex\", \"#rowKeyGetter\", \"#rowDataGetter\"];\n\nvar getVisibleRows = function getVisibleRows(rangeFrom, rangeTo, getRowData, getRowKey, getRowExtraProps, RowComponent) {\n  var result = [];\n\n  for (var rowKey; rangeFrom < rangeTo; rangeFrom++) {\n    rowKey = getRowKey ? getRowKey(rangeFrom) : rangeFrom;\n    result.push( /*#__PURE__*/React.createElement(RowComponent, {\n      getRowExtraProps: getRowExtraProps,\n      rowIndex: rangeFrom,\n      key: rowKey,\n      getRowData: getRowData\n    }));\n  }\n\n  return result;\n};\n\nvar Rows = function Rows(_ref) {\n  var getRowExtraProps = _ref.getRowExtraProps,\n      RowComponent = _ref.RowComponent;\n  var API = useApi(SUBSCRIBE_EVENTS);\n  useEffect(function () {\n    API.reportRowsRendered();\n  });\n  return getVisibleRows(API.startIndex, API.endIndex, API.rowDataGetter, API.rowKeyGetter, getRowExtraProps, RowComponent);\n};\n\nexport default Rows;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { memo, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Context from \"../Context\";\nimport useStore from \"../utils/useStore\";\nimport VariableSizeListStore from \"../models/VariableSizeList\";\nimport FixedSizeListStore from \"../models/FixedSizeList\";\nimport ScrollContainer from \"../common/ScrollContainer\";\nimport RowComponentDefault from \"./common/Row\";\nimport Rows from \"./common/Rows\";\nimport Scroller from \"../common/Scroller\";\nimport RowCountWarningContainerDefault from \"../common/RowCountWarningContainer\";\nimport commonPropTypes from \"../commonPropTypes\";\nimport commonDefaultProps from \"../commonDefaultProps\";\nimport cx from \"../utils/cx\";\n\nvar List = function List(_ref) {\n  var fixedSize = _ref.fixedSize,\n      getRowData = _ref.getRowData,\n      getRowKey = _ref.getRowKey,\n      getRowExtraProps = _ref.getRowExtraProps,\n      rowCount = _ref.rowCount,\n      overscanRowsCount = _ref.overscanRowsCount,\n      rowCountWarningsTable = _ref.rowCountWarningsTable,\n      RowCountWarningContainer = _ref.RowCountWarningContainer,\n      _ref$RowComponent = _ref.RowComponent,\n      RowComponent = _ref$RowComponent === void 0 ? RowComponentDefault : _ref$RowComponent,\n      dataRef = _ref.dataRef,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"fixedSize\", \"getRowData\", \"getRowKey\", \"getRowExtraProps\", \"rowCount\", \"overscanRowsCount\", \"rowCountWarningsTable\", \"RowCountWarningContainer\", \"RowComponent\", \"dataRef\", \"className\"]);\n\n  var scrollContainerRef = useRef();\n  var rowsContainerRef = useRef();\n  var Store = useStore(fixedSize ? FixedSizeListStore : VariableSizeListStore, dataRef);\n  useEffect(function () {\n    Store.merge({\n      rowDataGetter: getRowData,\n      rowKeyGetter: getRowKey,\n      overscanRowsCount: overscanRowsCount,\n      totalRows: rowCount,\n      rowsContainerNode: rowsContainerRef.current,\n      scrollContainerNode: scrollContainerRef.current\n    });\n  });\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: Store\n  }, rowCount > 0 ? /*#__PURE__*/React.createElement(ScrollContainer, _extends({\n    className: cx(\"afvscr-list-wrapper\", className),\n    ref: scrollContainerRef\n  }, props), /*#__PURE__*/React.createElement(Scroller, {\n    Component: \"div\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: rowsContainerRef\n  }, /*#__PURE__*/React.createElement(Rows, {\n    RowComponent: RowComponent,\n    getRowExtraProps: getRowExtraProps\n  }))) : rowCountWarningsTable ? /*#__PURE__*/React.createElement(RowCountWarningContainer, null, rowCountWarningsTable[rowCount]) : null);\n};\n\nList.propTypes = process.env.NODE_ENV !== \"production\" ? Object.assign({}, commonPropTypes, {\n  RowCountWarningContainer: PropTypes.any,\n  rowCountWarningsTable: PropTypes.object\n}) : {};\nList.defaultProps = Object.assign({}, commonDefaultProps, {\n  /*\n      For 90% non-reactive solutions, which only provide new getRowData when data is changed, memo is ok.\n      If RowComponent should be wrapped my mobx observer - non-memo version should be imported.\n      memo(observer(RowComponentDefault)) will do the trick.\n  */\n  RowComponent: memo(RowComponentDefault),\n  RowCountWarningContainer: RowCountWarningContainerDefault\n});\nexport default memo(List);"],"sourceRoot":""}