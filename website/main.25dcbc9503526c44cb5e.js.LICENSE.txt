/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* #__PURE__ */

/* 0 */

/* 1 */

/* 10 */

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

/* 17 */

/* 18 */

/* 19 */

/* 2 */

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

/* 25 */

/* 26 */

/* 27 */

/* 28 */

/* 29 */

/* 3 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/* 38 */

/* 39 */

/* 4 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 5 */

/* 6 */

/* 7 */

/* 8 */

/* 9 */

/* App is deployed to github pages, so BrowserRouter would not work there */

/* Math.imul(h, m): */

/* Math.imul(k, m): */

/* WEBPACK VAR INJECTION */

/* binding */

/* eslint-disable */

/* eslint-disable no-unused-vars */

/* harmony default export */

/* import() */

/* istanbul ignore next */

/* k >>> r: */

/* reexport */

/*#__PURE__*/

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Creates a history object that stores locations in memory.
 */

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Public API for generating a URL pathname from a path and parameters.
 */

/**
 * Public API for matching a URL pathname to a path.
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

/**
 * The public API for a <Router> that stores location in memory.
 */

/**
 * The public API for a <Router> that uses HTML5 history.
 */

/**
 * The public API for a <Router> that uses window.location.hash.
 */

/**
 * The public API for matching a single path and rendering.
 */

/**
 * The public API for navigating programmatically with a component.
 */

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * The public API for rendering a history-aware <a>.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type {!Array} */

/** @type {!Object} */

/** @type {string} */

/************************************************************************/

/******/

/***/

//

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// $FlowFixMe

// $FlowFixMe we know it's not null

// 'm' and 'r' are mixing constants generated offline.

// 0 means "already installed".

// @flow

// @font-face, @page

// @import

// @import is generally only used for font faces from google fonts and etc.

// A hashchange doesn't always == location change.

// About 1.5x faster than the two-arg version of Array#splice()

// Avoid failures from read-only properties

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ./node_modules/@emotion/core/dist/core.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/css/dist/css.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/hash/dist/hash.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/serialize/dist/serialize.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/sheet/dist/sheet.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js

// CONCATENATED MODULE: ./node_modules/history/esm/history.js

// CONCATENATED MODULE: ./node_modules/history/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/react-router/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/react-router/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ./node_modules/react-router/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js

// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js

// Check if module is in cache

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Create a new module (and put it into the cache)

// Detect buggy property enumeration order in older V8 versions.

// Do a few final mixes of the hash to ensure the last few

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ./lib/style.css

// EXTERNAL MODULE: ./node_modules/@emotion/core/node_modules/@babel/runtime/helpers/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ./node_modules/normalize.css/normalize.css

// EXTERNAL MODULE: ./node_modules/path-to-regexp/index.js

// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js + 4 modules

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// Ensure the hash is encoded properly before doing anything else.

// Ensure we always have a properly-encoded hash.

// Execute the module function

// Flag the module as loaded

// Handle the last few bytes of the input array

// IE 11 sometimes throws when accessing window.history.state

// If the path exists, push it onto the end.

// Ignore already escaped sequences.

// Ignore extraneous popstate events in WebKit.

// Ignore this change; we already setState in push/replace.

// Important!

// In non-strict mode we allow a slash at the end of match. If the path to

// Initialize the hash

// Inspired by https://github.com/garycourt/murmurhash-js

// Instead, we just default to 0 for keys we don't know.

// Instead, we just default to 0 for paths we don't know.

// Iterate over the tokens and create our regexp string.

// JSONP chunk loading for javascript

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Match Express-style parameters and un-named parameters with a prefix

// Match any characters still remaining.

// Match escaped characters that would otherwise appear in future matches.

// Mimic the behavior of DOM histories by

// Mix 4 bytes at a time into the hash

// Object.prototype.hasOwnProperty.call

// One-arg form: push(location)

// Otherwise, if either of them == null they are not equal.

// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86

// Preact uses an empty array as children by

// Prepend partial segment prefixes.

// Promise = chunk loading, 0 = chunk loaded

// Public interface

// Push the current path onto the tokens.

// React 15 compat

// React v16.11 and below

// React v16.12 and above

// Resolve incomplete/relative pathname relative to current location.

// Return false from a transition hook to cancel the transition.

// Return the exports of the module

// SVG-related properties

// See https://github.com/ReactTraining/history/pull/289

// TODO: If another transition starts while we're still confirming

// TODO: We could probably make this more reliable by

// Test for strict equality first.

// The chunk loading function for additional chunks

// The module cache

// The require function

// They're not really 'magic', they just happen to work well.

// This allows the user to escape special characters that won't transform.

// This file contains only the entry chunk.

// This implementation is based heavily on node's url.parse

// This is a bit of a hack. We have to start listening for location

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// This works in non-strict mode

// Two-arg form: push(path, state)

// UNUSED EXPORTS: CacheProvider, ClassNames, ThemeContext, keyframes, withEmotionCache

// UNUSED EXPORTS: MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, __RouterContext, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter, BrowserRouter, Link

// UNUSED EXPORTS: MemoryRouter, Prompt, StaticRouter, generatePath, useHistory, useRouteMatch, withRouter

// UNUSED EXPORTS: parsePath

// Use a negative lookahead to match only capturing groups.

// We can't use window.location.hash here because it's not

// We cannot tell if a hashchange was caused by a PUSH, so we'd

// We cannot tell if a hashchange was caused by a REPLACE, so we'd

// We don't expect any of the above to throw, but better to be safe.

// We return undefined, instead of nothing here, so it's

// We use React.Children.forEach instead of React.Children.toArray().find()

// When rendering in a static context,

// When there is no prior location and pathname is empty, set it to /

// __webpack_public_path__

// _usually_(not always since there could be multiple style tags)

// a Promise means "currently loading".

// add entry module to deferred list

// add entry modules from loaded chunk to deferred list

// and optional suffixes. Matches appear as:

// and there will be very few iterations of this generally

// and we could have a special build just for that

// and you can only have one source map per style tag

// as the second character will happen less often than

// at-rule

// avoid mem leaks in IE.

// be the first ones in prod and generally later in dev

// because this module is primarily intended for the browser and node

// best way to handle this.

// but it's also required in react native and similar environments sometimes

// but this is much easier and the native packages

// bytes are well-incorporated.

// causing a render after a cancelled POP.

// changes here in the constructor in case there are any <Redirect>s

// charcode for b

// charcode for l

// class name could be used further down

// component at different URLs.

// consistent across browsers - Firefox will pre-decode it!

// const m = 0x5bd1e995;

// const r = 24;

// create a fake namespace object

// create error before stack unwound to get useful stacktrace later

// default, so use null if that's the case.

// define __esModule on exports

// define getter function for harmony exports

// don't hoist over string (html) components

// easier to handle this case. if(!global) { ...}

// eslint-disable-line no-alert

// eslint-disable-line no-new-wrappers

// expose the module cache

// expose the modules object (__webpack_modules__)

// extracted by mini-css-extract-plugin

// finalize string values (regular strings and functions interpolated into css calls)

// for a tiny bit of correctness that won't matter in the real world

// g can still be undefined, but nothing to do about it...

// get a new location before the <Router> is mounted.

// getDefaultExport function for compatibility with non-harmony modules

// having "@" as the first character

// here because toArray adds keys to all child elements and we do not want

// http://fb.me/prop-types-in-prod

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://esbench.com/bench/5b809c2cf2949800a0f61fb5

// if this doesn't exist then it will be null so the style element will be appended

// ignore everything but left clicks

// in non-ending mode, where "/test/" shouldn't match "/test//route".

// insert keyframes

// install a JSONP callback for chunk loading

// is that other hash histories in the page will consider it a POP.

// is valid at the end of a path match, not in the middle. This is important

// it's 1 in dev because we insert source maps that map a single rule to a location

// keeping a list of keys we've seen in sessionStorage.

// keeping a list of paths we've seen in sessionStorage.

// key is the value of the data-emotion attribute, it's used to identify different sheets

// make certain babel optimisations not possible

// match already ends with a slash, we remove it for consistency. The slash

// might use a different theme context in the future anyway

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// not passing the registered cache to serializeStyles because it would

// not the most efficient thing ever but this is a pretty rare case

// object to store loaded and loading chunks

// on error function for async loading

// on the initial render. If there are, they will replace/push when

// onClick prevented default

// otherwise there will be an error

// property

// rather setState here and ignore the hashchange. The caveat here

// run deferred modules when all chunks ready

// run deferred modules when ready

// script path function

// selector

// set the new location immediately.

// setup Promise in chunk cache

// so that using `css` from `emotion` and passing the result to the css prop works

// so we don't have to add it to registered cache.

// so while this could be technically correct then it would be slower and larger

// start chunk loading

// technically this means that the @import rules will

// the big drawback is that the css won't be editable in devtools

// the matched portion of the URL

// the max length is how many rules we have per style tag, it's 65000 in speedy mode

// the path used to match

// the previous one, we may end up in a weird state. Figure out the

// the tree but if it's a string tag, we know it won't

// they mount and since cDM fires in children before parents, we may

// this ignores label

// this improves memory usage since we can avoid storing the whole style string

// this is a really hot path

// this is the ultrafast version, works across browsers

// this shouldn't really matter in the real world though

// this weirdness brought to you by firefox

// to is absolute

// to is relative, drop the filename

// to trigger an unmount/remount for two <Route>s that render the same

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// use Context.read for the theme when it's stable

// using a global regex with .exec is stateful so lastIndex has to be reset each time

// we check the second character first because having "i"

// we need to insert @import rules before anything else

// we only need to add the styles to the registered cache if the

// we start at 1 since we've already handled the first arg

// we're doing this to avoid preconstruct's dead code elimination in this one case

// webpackBootstrap

// whether or not we matched exactly
