{"version":3,"sources":["webpack:///./websiteSrc/examples/list/withFeatures.js","webpack:///./node_modules/lodash/toFinite.js","webpack:///./node_modules/lodash/identity.js","webpack:///./node_modules/lodash/toInteger.js"],"names":["wrapperCss","heights","times","r","getRowData","index","style","lineHeight","borderTop","background","ListWithScrollToRowButton","className","dataRef","useRef","css","onSubmit","e","preventDefault","v","currentTarget","elements","scrollRow","value","current","scrollToRow","name","type","defaultValue","rowCount","toNumber","module","exports","toFinite","result","remainder"],"mappings":";yIAMA,IAAMA,EAAa,CAAH,2FAOVC,EAAUC,IAFC,KAEgB,kBAAMC,IAAG,GAAI,QAExCC,EAAa,SAAAC,GAAK,OACpB,mBAAKC,MAAO,CACRC,WAAeN,EAAQI,GAAb,KACVG,UAAW,iBACXC,WAAY,OAAON,IAAE,EAAE,KAAb,IAAqBA,IAAE,GAAG,IAA1B,KAAkCA,IAAE,GAAG,IAAvC,OAHd,MAKQE,EALR,KAKsBJ,EAAQI,GAL9B,OA2CWK,UAlCmB,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,UAE3BC,EAAUC,mBAQhB,OACI,mBAAKC,IAAKd,EAAYW,UAAWA,GAC7B,oBAAMI,SARQ,SAAAC,GAClBA,EAAEC,iBACF,IAAMC,EAAIF,EAAEG,cAAcC,SAASC,UAAUC,MAC7CV,EAAQW,QAAQC,aAAcN,KAMtB,iCAEI,qBACIO,KAAK,YACLC,KAAK,SACLC,aAAa,OAGrB,sBAAQD,KAAK,UAAb,WAIJ,YAAC,IAAD,CACId,QAASA,EACTR,WAAYA,EACZwB,SA1CC,S,mBCXjB,IAAIC,EAAW,EAAQ,IAyCvBC,EAAOC,QAZP,SAAkBT,GAChB,OAAKA,GAGLA,EAAQO,EAASP,MA9BJ,KA+BaA,KA/Bb,IACG,uBA+BFA,EAAQ,GAAK,EAAI,GAGxBA,GAAUA,EAAQA,EAAQ,EAPd,IAAVA,EAAcA,EAAQ,I,iBCXjCQ,EAAOC,QAJP,SAAkBT,GAChB,OAAOA,I,mBCjBT,IAAIU,EAAW,EAAQ,IAmCvBF,EAAOC,QAPP,SAAmBT,GACjB,IAAIW,EAASD,EAASV,GAClBY,EAAYD,EAAS,EAEzB,OAAOA,GAAWA,EAAUC,EAAYD,EAASC,EAAYD,EAAU","file":"14.97fd9b9072356591c3f8.js","sourcesContent":["import React, { useRef } from \"react\";\nimport List from \"af-virtual-scroll/lib/List\";\nimport r from \"lodash/random\";\nimport times from \"lodash/times\";\nimport { css } from \"@emotion/core\";\n\nconst wrapperCss = css`\n    display: flex;\n    flex-flow: column nowrap;\n`;\n\nconst rowCount = 100000;\n\nconst heights = times( rowCount, () => r( 50, 250 ) );\n\nconst getRowData = index => (\n    <div style={{\n        lineHeight: `${heights[index]}px`,\n        borderTop: \"1px solid #666\",\n        background: `hsl(${r(0,360)},${r(30,80)}%,${r(30,80)}%)`\n    }}>\n        row{index}:&nbsp;{heights[index]}px\n    </div>\n);\n\nconst ListWithScrollToRowButton = ({ className }) => {\n\n    const dataRef = useRef();\n\n    const submitHandler = e => {\n        e.preventDefault();\n        const v = e.currentTarget.elements.scrollRow.value;\n        dataRef.current.scrollToRow( +v );\n    };\n\n    return (\n        <div css={wrapperCss} className={className}>\n            <form onSubmit={submitHandler}>\n                <label>\n                    Row:&nbsp;\n                    <input\n                        name=\"scrollRow\"\n                        type=\"number\"\n                        defaultValue=\"0\"\n                    />\n                </label>\n                <button type=\"submit\">\n                    Scroll\n                </button>\n            </form>\n            <List\n                dataRef={dataRef}\n                getRowData={getRowData}\n                rowCount={rowCount}\n            />\n        </div>\n    );\n};\n\nexport default ListWithScrollToRowButton;","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n"],"sourceRoot":""}