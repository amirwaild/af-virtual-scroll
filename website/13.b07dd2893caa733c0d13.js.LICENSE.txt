/*
              * aria-rowindex is counted from 1 according to w3c spec;
              * parseInt with radix is 2x faster, then +, -, etc.
                https://jsperf.com/number-vs-parseint-vs-plus/116
          */

/*
            Some benchmarks inspire me to use nextElementSibling
            https://jsperf.com/nextsibling-vs-childnodes-increment/2
        */

/*
            clearing only what is needed;
            TODO: optimize this more
        */

/*
          Trees are not always ideally allocated, gaps are possible.
          Classical way for calculating parents is much simpler,
          but can do much more work(summing zeros) in such conditions. Commented classic algo:
                   for( let i = N + totalRows >> 1, j; i > 0; --i ){
              j = i << 1;
              sTree[ i ] = sTree[ j ] + sTree[ j | 1 ];
          }
      */

/*
          when using ...args and arrow func, babel is making unnecessary arguments copy.
          Going old-school here for perf
      */

/*
        getVisibleRangeStart works by "strict less" algo. It is good for startIndex,
        but for endIndex we need "<=", so adding 1 artificially.
    */

/*
      Column heights may change during scroll/width-change
  */

/*
      For 90% non-reactive solutions, which only provide new getRowData when data is changed, memo is ok.
      If RowComponent should be wrapped my mobx observer - non-memo version should be imported.
      memo(observer(RowComponentDefault)) will do the trick.
  */

/*
      Hmm, I can't put here more than ~ 3 000 000. Maybe need to put one more row in case this height is > 3 000 000
  */

/*
      TODO: maybe some react-like performUnitOfWork logic is needed here?
  */

/*
      When all row heights are different,
      we must "predict" them on the left of startIndex and on the right of endIndex(where they are invisible),
      basing on what we know: heights between startIndex and endIndex.
      Using simple average by default.
  */

/*
      tabIndex="0" is for proper keyboard nav
      https://bugzilla.mozilla.org/show_bug.cgi?id=1346159
  */

/*
    * flex: 1 1 auto, assuming that table would be used full-stretch mostly
    width: 100% covers case, when no tbody is rendered and exact width cannot be calculated
*/

/*
    This constant is used for 2 reasons:
        * Math.log2( 1 ) is 0, which is not correct for cache size calculation
        * We should always have some extra space for new rows. We do not want to reallocate cache every time.
*/

/*
    flex: 1 1 auto, assuming that table would be used full-stretch mostly
*/

/* In segments tree 1 node is always sum of all elements */

/* Two vars for non-recursive segments tree */

/* avoiding double destructurization via getRowExtraProps, so making prop object once */

/* harmony default export */

/*#__PURE__*/

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

/** Used as references for various `Number` constants. */

/***/

// CONCATENATED MODULE: ./src/List/common/Rows.js

// ESM COMPAT FLAG

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/lodash/debounce.js

// EXTERNAL MODULE: ./node_modules/lodash/random.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// Uint16 cannot be used here, because array stores intermediate sums, which can be huge.

// console.log( "%d| was: %d; is: %d", index, sTree[N+index],newHeight)
