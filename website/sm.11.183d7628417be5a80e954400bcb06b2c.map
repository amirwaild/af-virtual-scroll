{"version":3,"sources":["webpack:///./websiteSrc/App/examples/table/totals.js","webpack:///./node_modules/lodash/times.js","webpack:///./node_modules/lodash/_baseTimes.js","webpack:///./node_modules/lodash/_castFunction.js"],"names":["columns","dataKey","label","rows","times","n1","r","n2","n3","n4","totals","getRowData","index","TableWithTotals","rowCount","baseTimes","castFunction","toInteger","nativeMin","Math","min","module","exports","n","iteratee","length","result","Array","identity","value"],"mappings":"qEAAA,oEAKMA,EAAU,CACZ,CAAEC,QAAS,KAAMC,MAAO,MACxB,CAAED,QAAS,KAAMC,MAAO,MACxB,CAAED,QAAS,KAAMC,MAAO,MACxB,CAAED,QAAS,KAAMC,MAAO,OAKtBC,EAAOC,IAFI,KAEa,iBAAO,CACjCC,GAAIC,IAAG,EAAG,KACVC,GAAID,IAAG,EAAG,KACVE,GAAIF,IAAG,EAAG,KACVG,GAAIH,IAAG,EAAG,SAGRI,EAAS,CACXL,GAAI,CAAE,SACNE,GAAI,CAAE,OACNC,GAAI,CAAE,WACNC,GAAI,CAAE,QAAS,MAAO,YAGpBE,EAAa,SAAAC,GAAK,OAAIT,EAAMS,IAWnBC,UATS,kBACpB,YAAC,IAAD,CACIF,WAAYA,EACZG,SArBS,IAsBTd,QAASA,EACTU,OAAQA,M,oBCnChB,IAAIK,EAAY,EAAQ,KACpBC,EAAe,EAAQ,KACvBC,EAAY,EAAQ,KASpBC,EAAYC,KAAKC,IAuCrBC,EAAOC,QAlBP,SAAeC,EAAGC,GAEhB,IADAD,EAAIN,EAAUM,IACN,GAAKA,EA7BQ,iBA8BnB,MAAO,GAET,IAAIX,EA7BiB,WA8BjBa,EAASP,EAAUK,EA9BF,YAgCrBC,EAAWR,EAAaQ,GACxBD,GAjCqB,WAoCrB,IADA,IAAIG,EAASX,EAAUU,EAAQD,KACtBZ,EAAQW,GACfC,EAASZ,GAEX,OAAOc,I,kBC5BTL,EAAOC,QAVP,SAAmBC,EAAGC,GAIpB,IAHA,IAAIZ,GAAS,EACTc,EAASC,MAAMJ,KAEVX,EAAQW,GACfG,EAAOd,GAASY,EAASZ,GAE3B,OAAOc,I,oBChBT,IAAIE,EAAW,EAAQ,KAavBP,EAAOC,QAJP,SAAsBO,GACpB,MAAuB,mBAATA,EAAsBA,EAAQD","file":"11.6f9c0c9f9f8d8ecc9264.js","sourcesContent":["import React from \"react\";\nimport Table from \"af-virtual-scroll/lib/Table\";\nimport r from \"lodash/random\";\nimport times from \"lodash/times\";\n\nconst columns = [\n    { dataKey: \"n1\", label: \"N1\" },\n    { dataKey: \"n2\", label: \"N2\" },\n    { dataKey: \"n3\", label: \"N3\" },\n    { dataKey: \"n4\", label: \"N4\" },\n];\n\nconst rowCount = 5000;\n\nconst rows = times( rowCount, () => ({\n    n1: r( 1, 20000 ),\n    n2: r( 1, 20000 ),\n    n3: r( 1, 20000 ),\n    n4: r( 1, 20000 )\n}));\n\nconst totals = {\n    n1: [ \"count\" ],\n    n2: [ \"sum\" ],\n    n3: [ \"average\" ],\n    n4: [ \"count\", \"sum\", \"average\" ]\n};\n\nconst getRowData = index => rows[ index ];\n\nconst TableWithTotals = () => (\n    <Table\n        getRowData={getRowData}\n        rowCount={rowCount}\n        columns={columns}\n        totals={totals}\n    />\n);\n\nexport default TableWithTotals;","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n"],"sourceRoot":""}